############################################################################
#
#	Makefile for GATE2
#
#	Hamish Cunningham, 8/Jan/99
#
# Developer notes:
#
# we should modify makejdepend to build a list of dependencies for
# the resources dir too, so that it doesn't always copy resources
# whenever we "make"
#
############################################################################
#
#	$Id$
#
############################################################################

# a list of packages used in documentation generation. including a
# package that contains no classes causes javadoc to bomb
PKGS=	gate gate.annotation gate.corpora gate.creole \
	gate.creole.gazeteer gate.creole.tokeniser \
	gate.db gate.email gate.fsm gate.gui gate.html \
	gate.jape gate.jape.gui gate.jape.parser \
	gate.sgml gate.util gate.xml

# classpath to build compile commands from
CP=	-classpath \
../classes:../lib/junit.jar:../lib/jgl3.1.0.jar:../lib/orajdbc2.zip:../lib/jacl.jar:../lib/oro.jar:../lib/postgres6.5-jdbc1.2.jar:../lib/graph_drawing.jar:../lib/javacompiler.jar:../lib/jaxp.jar:../lib/SunXmlParser.jar:../lib/jigsaw.jar:../lib/gnu-regexp-1.0.8.jar:../lib/guk.jar:

# sourcepath to build compile commands from
SP=	-sourcepath ../src

# compile command
#COMPILE=./jdk.sh -s -g:none javac -Xdepend -Xstdout -O
COMPILE=./jdk.sh -s -g:none javac -O -d ../classes $(SP) $(CP)

# "all" builds the .class files. 
# having the main test class as first target, and -Xdepend in the (1.2)
# javac options, means that most classes get compiled by a single call
# to javac
all: ../classes/gate/TestGate.class classes resources \
	TestJdk.jar TestResources.jar

# build the whole thing
everything: depend all jar docs internaldocs test

# the .class/.java dependencies are all stored Makefile.dep
include Makefile.dep

# regenerate Makefile.dep
depend:
	./makejdepend.sh ../src/gate >Makefile.dep

# run the test suite (swap the last line for one of the commented ones to get
# the JUnit GUI test runner)
test: japefiles
	./jdk.sh java -Djava.compiler=none -classpath gate.jar \
	  junit.textui.TestRunner gate.TestGate
#	  junit.ui.TestRunner gate.TestGate
#	  junit.ui.LoadingTestRunner gate.TestGate

# build gate.jar. recursively includes all the .jar and .zip from lib too
jar: tcl japefiles resources classes.jar
	rm -f gate.jar
	./jdk.sh java -cp classes.jar gate.util.JarFiles gate.jar \
	  classes.jar ../lib/*.jar ../lib/*.zip

# just the gate classes in a jar
classes.jar:
	cd ../classes && ../build/jdk.sh jar cvf ../build/classes.jar \
	  gate resources

# copy the resources directory into "classes"
resources:
	cd ../src/gate && cp -R resources ../../classes/gate
	cd ../classes/gate/resources && rm -r `find . -name CVS -print`

# refresh the jar with all the class files
jarupdate:
	cd ../classes && ../build/jdk.sh jar uvf ../build/gate.jar gate

# build the Tcl script library:
# update the list of scripts, and copy the scripts into classes
tcl:
	(echo '# ScriptsList.tcl  ** AUTOGENERATED: DO NOT EDIT **'; \
	 echo 'namespace eval GATE { set gateScriptsList {') \
	 > ../src/gate/util/ScriptsList.tcl
	cd ../src && for f in `find . -name '*.tcl' -print`; \
	do cp $$f ../classes/$$f; f=`echo $$f |sed 's,^..,,'`; \
	  echo "  "$$f >> ../src/gate/util/ScriptsList.tcl; \
	done; echo '} }' >> ../src/gate/util/ScriptsList.tcl
	cp ../src/gate/util/ScriptsList.tcl ../classes/gate/util/ScriptsList.tcl

# run the Jacl Tcl shell
jaclsh:
	./jdk.sh java -Djava.compiler=none $(CP) tcl.lang.Shell

# make the javadoc documentation
docs:
	./jdk.sh \
	  -s '-link http://java.sun.com/products/jdk/1.3/docs/api/' \
	  javadoc $(SP) $(CP) -J-Xmx200m -public \
	  -d ../doc/javadoc $(PKGS)
	cp ../src/gate/CookBook.java ../doc/javadoc/gate/CookBook.txt

# make the developer Javadocs (inc. private members)
internaldocs: 
	./jdk.sh \
	  -s '-link http://redmires.dcs.shef.ac.uk/java1.3docs/api/' \
	  javadoc $(SP) $(CP) -J-Xmx200m -private -use \
	  -d ../doc/javadoc/internal $(PKGS)
	cp ../src/gate/CookBook.java ../doc/javadoc/internal/gate/CookBook.txt

# convert the source to HTML using the java2html utility (if installed)
java2html:
	rm -f ../doc/internal/java2html/*.html
	echo '<!--AUTOGEN!--><HTML><HEAD><TITLE>GATE code</TITLE></HEAD><BODY>' \
	  >../doc/internal/java2html/index.html
	cd ../src && for f in \
	  `find . -name '*.java' -print |sed 's,^..,,' |sort`; \
	do NAME=`echo $$f |sed 's,\/,\.,g'`; \
	java2html -i $$f -o ../doc/internal/java2html/$$NAME.html; \
	echo "<P><A HREF=$$NAME.html>$$NAME</A>" \
	  >> ../doc/internal/java2html/index.html; done
	echo '</BODY></HTML>' \
	  >> ../doc/internal/java2html/index.html


# delete all the class files etc. (doesn't delete gate.jar)
clean:
	rm -f classes.jar TestJdk.jar TestResources.jar
	rm -rf `find ../classes/* -print |grep -v CVS` \
	  `find .. -name '*.~*' -print`

# make a pretty list of the gate source, missing class files etc.
list:
	@ ./list.sh

# rebuild the JAPE file parser.
# uses JavaCC 0.8pre1 from ../lib for the java,
# and 0.7 from ./JavaCC-071.zip for the HTML to avoid JJDoc bug in 0.8pre1
jape: japefiles ../src/gate/jape/parser/ParseCpsl.java \
  ../src/gate/jape/parser/ParseCpsl.html \
  ../src/gate/jape/parser/ParseCpslPlain.html
../src/gate/jape/parser/ParseCpsl.java: ../src/gate/jape/parser/ParseCpsl.jj
	cd ../src/gate/jape/parser; \
	../../../../build/jdk.sh java -cp ../../../../lib/JavaCC.zip \
	  COM.sun.labs.javacc.Main ParseCpsl.jj

# put .japes into the classes, and hence the jar file
japefiles:
	cd ../src && for f in `find . -name '*.jape' -print |grep -v resources`; \
	do cp $$f ../classes/$$f; done

# jape grammar documentation
../src/gate/jape/parser/ParseCpsl.html: ../src/gate/jape/parser/ParseCpsl.jj \
  ../src/gate/jape/parser/ParseCpslPlain.html
	cd ../src/gate/jape/parser; \
	mv ParseCpsl.html ParseCpslPlain.html || :; \
	../../../../build/jdk.sh java -cp ../../../../build/JavaCC-071.zip \
	  COM.sun.labs.jjdoc.JJDocMain -ONE_TABLE=false ParseCpsl.jj

# jape grammar documentation
../src/gate/jape/parser/ParseCpslPlain.html: \
  ../src/gate/jape/parser/ParseCpsl.jj
	cd ../src/gate/jape/parser; \
	../../../../build/jdk.sh java -cp ../../../../build/JavaCC-071.zip \
	  COM.sun.labs.jjdoc.JJDocMain  ParseCpsl.jj

# make the resources test jar
TestResources.jar: testpkg/TestPR1.java testpkg/TestPR2.java \
	testpkg/creole.xml
	./jdk.sh javac -classpath ../classes -d testpkg testpkg/Test*.java
	cd testpkg && ../jdk.sh jar cvf ../TestResources.jar \
	  testpkg/Test*.class creole.xml

# make the testpkg.Dummy jar used by TestJdk to test class reloading
TestJdk.jar: testpkg/Dummy.java
	./jdk.sh javac -classpath ../classes -d testpkg testpkg/Dummy.java
	cd testpkg && ../jdk.sh jar cvf ../TestJdk.jar testpkg/Dummy.class

# make a list of gate packages
gatepackages:
	cd ../src; \
	for f in `find gate -print`; do \
	  [ -d $$f ] || continue; \
	  case $$f in \
	    *CVS) continue;; \
	    gate/resources*) continue;; \
	  esac; \
	  echo $$f |sed 's,/,.,g'; \
	done

############################################################################
