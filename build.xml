<?xml version="1.0"?>
<!-- $Id$ -->
<project name="GATE" default="all" basedir=".">
    <description>
        GATE see http://gate.ac.uk
    </description>
  <!-- set global properties for this build -->
  
  <!-- ###################################################################
                          USER MODIFYABLE OPTIONS
       ################################################################### -->
  
  <!-- Set the maximum amount of memory avaialble to GATE. Default is 200 MB. --> 
  <property name="run.max.mem" value="200m"/>
  
  <!-- Set the location of the tools.jar library. If not set, GATE will first
  try to locate inside the current Java VM or, failing that, will fall back
  to using the one included in the bin directory.
  Remove the comment markers on the line below and edit the location.-->
  <!-- <property name="tools.jar.location" value="bin/tools14.jar"/>  -->
  
  
  <!-- ###################################################################
                        USER MODIFYABLE OPTIONS END HERE 
       ################################################################### -->
  
  <!-- Directories -->
  
  <!-- Sources -->
  <property name="srcDir" location="src"/>
  
  <!-- Files required by the build process -->
  <property name="buildDir" location="build"/>

  <!-- Files required by the build process -->
  <property name="binDir" location="bin"/>
  
  <!-- Output directory for the build process -->
  <property name="outputDir"  location="classes"/>

  <!-- Libraries directory for the build process -->
  <property name="libDir"  location="lib"/>
  
  <!-- Extensions directory for the build process -->
  <property name="extDir"  location="lib/ext"/>

  <!-- Documentation directory -->
  <property name="docDir"  location="doc"/>

  <!-- Read version and build numbers -->
  <loadfile property="gate.version" srcFile="${buildDir}/version.txt"/>
  <loadfile property="gate.build" srcFile="${buildDir}/build.txt"/>

  
  <!-- Use the new 1.3+ compiler -->
  <property name="build.compiler"  value="modern"/>

	<!-- The libraries -->
  <fileset id="libs" dir="${libDir}">
    <include name="*.jar"/>
    <include name="*.zip"/>
  </fileset>

	<!-- The extensions -->
  <fileset id="exts" dir="${extDir}">
    <include name="*.jar"/>
  </fileset>
    
  <!-- The build CLASSPATH -->
  <path id="build.class.path">
		<fileset refid="libs"/>
    <fileset refid="exts"/>
  </path>
  
  <!-- Locate the tools.jar library -->
  <!-- Properties are immutable in ANT so the first successful assignment wins  -->
  <!-- First try the user set value -->
  <available file="${tools.jar.location}"
             property="tools.jar.path"
             value="${tools.jar.location}"/>
  <!-- Secondly try the location inside JVM -->
  <available file="${java.home}/../lib/tools.jar"
             property="tools.jar.path"
             value="${java.home}/../lib/tools.jar"/>
  <property name="tools.jar.path"
            location="${binDir}/tools14.jar"/>
  
  <!-- The run CLASSPATH -->
  <path id="run.class.path">
    <pathelement location="${binDir}/gate.jar"/>
    <pathelement location="${tools.jar.path}"/>
		<fileset refid="libs"/>
  </path>
  
  <tstamp>
    <format property="TODAY_UK" pattern="d-MMMM-yyyy" locale="en"/>
    <format property="TSTAMP_UK" pattern="hh:mm" locale="en"/>
  </tstamp>
  
  <!-- Prints out some information messages -->
  <echo level="info">
    This is the ANT build script for GATE (http://gate.ac.uk).
    Type &quot;ant help&quot; for details about the targets available.
    GATE ${gate.version}, build ${gate.build}</echo>
    
  <!-- Prints out details about the targets -->
  <target name="help">
    <echo level="info">
      This is the ANT build script for gate (http://gate.ac.uk).
      The following targets are available
        -all (default target): compiles GUK and GATE classes and makes the gate.jar archive.
        
        -compile: compiles all the .java files
        -resources: copies the resources to the output directory (${outputDir})
        -jar: creates the gate.jar archive
        -run: starts GATE
        -clean: cleans up the output from all previous builds
        
        -doc: creates the Javadoc and Java2HTML documentation
        -docclean: deletes all built documentation
        -jape: rebuilds the JAPE parser files and associated documentation
        -guk: compiles the GUK classes and builds the guk.jar archive
        -gukdemo: starts the GUK Editor (a.k.a. GATE Unicode Editor)
        -test: runs the GATE test suite
        
        -distro: make a GATE distribution (calls all build tasks in the process)
    </echo>
  </target>
  
	<!-- Copies resources to the output directory -->
  <target name="resources">
		<copy todir="${outputDir}/gate/resources"
		      includeEmptyDirs="true" >
			<fileset dir="${srcDir}/gate/resources"
							 excludes="**/CVS,**/CVS/**,**/.cvsignore" />
		</copy>
		<copy file="${buildDir}/build.txt" todir="${outputDir}/gate/resources"/>
		<copy file="${buildDir}/version.txt" todir="${outputDir}/gate/resources"/>
		<copy todir="${outputDir}/gate/util"
		      includeEmptyDirs="true">
			<fileset dir="${srcDir}/gate/util"
               includes="*.tcl"/>
		</copy>
	</target>


	<!-- This target compiles the GUK classes which are required by the main  
       GATE compile task -->  
  <target name="guk">
    <javac classpathref="build.class.path"
           destdir="${outputDir}" 
           includes="guk/**" 
           source="1.4"
           srcdir="${srcDir}"/>
		<jar destfile="${libDir}/ext/guk.jar" 
         update="false"
         index="true">
      <fileset dir="${outputDir}"
               includes="guk/**"/>
      <fileset dir="${srcDir}/guk/resources"
               excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </jar>
  </target>

	<!-- This target compiles all the classes -->  
  <target name="compile"
          depends="guk"
          description="compile the source " >
    <!-- Compile the java code from ${srcDir} into ${buildDir} -->
    <javac srcdir="${srcDir}" 
		       destdir="${outputDir}"
           source="1.4"
           includes="gate/**,com/**"
					 classpathref="build.class.path"/>
  </target>

	<!-- This target compiles all the classes including debug information -->  
  <target name="compile_debug"
          depends="guk"
          description="compile the source " >
    <!-- Compile the java code from ${srcDir} into ${buildDir} -->
    <javac srcdir="${srcDir}" 
		       destdir="${outputDir}"
           source="1.4"
           debug="true"
           includes="gate/**,com/**"
					 classpathref="build.class.path"/>
  </target>

	
  <!-- Make gate.jar archive -->
	<target name="jar" depends="compile,resources">
		<jar destfile="${binDir}/gate.jar" 
         update="false"
         index="true">
      <fileset dir="${outputDir}/"
               includes="gate/**,com/**"/>
<!--    <zipgroupfileset refid="libs"/> -->
    </jar>
	</target>
  
  <!-- Everything! -->
	<target name="all" depends="jar">
	</target>
  
  <!-- Run the beast -->
  <target name="run">
    <echo message="Using JVM at ${java.home}, tools.jar at ${tools.jar.path}."/>
    <condition property="mac.dock.name.option"
               value="-Xdock:name=GATE 3.0">
      <os family="mac"/>
    </condition>
    <condition property="mac.dock.name.option"
               value="">
      <not><os family="mac"/></not>
    </condition>    
    <java classname="gate.Main" 
          classpathref="run.class.path" 
          fork="true"
          spawn="false"
          maxmemory="${run.max.mem}">
       <jvmarg value="-Djava.ext.dirs=${extDir}"/>
       <jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
       <jvmarg value="-Dcom.apple.mrj.application.growbox.intrudes=false"/>
       <jvmarg value="-Dcom.apple.mrj.application.live-resize=true"/>
       <jvmarg value="${mac.dock.name.option}"/>
     </java>
  </target>
  
  <!-- Run the GUK editor -->
  <target name="gukdemo">
    <java classname="guk.Editor" 
          fork="true"
          spawn="false">
      <jvmarg value="-Djava.ext.dirs=${extDir}"/>
     </java>
  </target>
  
  <!-- Clear all build output -->
  <target name="clean">
    <delete includeemptydirs="true">
      <fileset dir="${outputDir}" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
  </target>
  
  <!-- Make documentation -->
  <target name="javadoc">
    <javadoc access="protected" 
              destdir="${docDir}/javadoc"
              classpathref="run.class.path"
              Extdirs="${extDir}"
              Encoding="UTF-8"
              Use="yes"
              Windowtitle="GATE JavaDoc"
              link="http://java.sun.com/j2se/1.4.2/docs/api/"
              docencoding="UTF-8"
              charset="UTF-8"
              source="1.4"
              breakiterator="true">
      <fileset dir="${srcDir}"/>        
    </javadoc>
  </target>
  
  <!-- Make documentation - internal -->
  <target name="internaljavadoc">
    <javadoc access="private" 
              destdir="${docDir}/javadoc/internal"
              classpathref="run.class.path"
              Extdirs="${extDir}"
              Encoding="UTF-8"
              Use="yes"
              Windowtitle="GATE JavaDoc"
              link="http://java.sun.com/j2se/1.4.2/docs/api/"
              docencoding="UTF-8"
              charset="UTF-8"
              source="1.4"
              breakiterator="true">
      <fileset dir="${srcDir}"/>        
    </javadoc>
  </target>

  
  <!-- Convert the source to HTML using the java2html utility -->
  <target name="java2html">
    <java jar="${buildDir}/lib/j2h.jar"
          fork="true"
          spawn="false">
      <jvmarg value="-Dfile.encoding=UTF-8"/>
      <arg value="-d"/> <arg file="${docDir}/java2html/"/>
      <arg value="-js"/> <arg file="${srcDir}"/>
      <arg value="-jd"/> <arg file="${docDir}/javadoc"/>
      <arg value="-m"/> <arg value="4"/>
      <arg value="-t"/> <arg value="2"/>
      <arg value="-n"/> <arg value="&quot;GATE source&quot;"/>
    </java>
  </target>
 
  <target name="doc" depends="javadoc, internaljavadoc, java2html"/>
 
  
  <!-- Clear all built documentation -->
  <target name="docclean">
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/javadoc" excludes="**/CVS,**/CVS/**,**/.cvsignore,internal,internal/**"/>
    </delete>
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/javadoc/internal" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/java2html" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
  </target>
  
  <!-- Rebuild the JAPE file parser. 
       Uses JavaCC 0.8pre1 from ../lib for the java, and 0.7 
       from ./JavaCC-071.zip for the HTML to avoid JJDoc bug in 0.8pre1 -->
  <target name="jape">
    <java classname="COM.sun.labs.javacc.Main" 
          fork="true"
          spawn="false"
          dir="${srcDir}/gate/jape/parser">
      <classpath>
        <pathelement location="${libDir}/JavaCC.zip"/>
      </classpath>
      <arg value="ParseCpsl.jj"/>
    </java>
    
    <java classname="COM.sun.labs.jjdoc.JJDocMain" 
          fork="true"
          spawn="false"
          dir="${srcDir}/gate/jape/parser">
      <classpath>
        <pathelement location="${buildDir}/JavaCC-071.zip"/>
      </classpath>
      <arg value="ParseCpsl.jj"/>
    </java>

    <move file="${srcDir}/gate/jape/parser/ParseCpsl.html"
          toFile="${srcDir}/gate/jape/parser/ParseCpslPlain.html"/>
          
    <java classname="COM.sun.labs.jjdoc.JJDocMain" 
          fork="true"
          spawn="false"
          dir="${srcDir}/gate/jape/parser">
      <classpath>
        <pathelement location="${buildDir}/JavaCC-071.zip"/>
      </classpath>
      <arg value="-ONE_TABLE=false"/>
      <arg value="ParseCpsl.jj"/>
    </java>
  </target>
  
  
  <target name="test" depends="jar">
    <junit fork="true" 
           showoutput="false"
           printsummary="yes">
      <classpath refid="run.class.path"/>
      <sysproperty key="gate.config" value="${buildDir}/gate.xml"/>
      <sysproperty key="gate.home" value="${basedir}"/>
      <sysproperty key="load.plugin.path" value="file:${basedir}/plugins/ANNIE;file:${basedir}/plugins/Information_Retrieval;file:${basedir}/plugins/Machine_Learning;file:${basedir}/plugins/Obsolete;file:${basedir}/plugins/Ontology_Tools;file:${basedir}/plugins/Tools;file:${basedir}/plugins/WordNet"/>      
      <jvmarg value="-Djava.ext.dirs=${extDir}"/>
      <jvmarg value="-Xmx=200m"/>
      <formatter type="plain"
                 usefile="false"/>
      <formatter type="xml"
                 if="write.xml"/>
      <test name="gate.TestGate"
            outfile="testResult"
            todir="${buildDir}"/>
    </junit>
  </target>
  
  <!-- Make the archives for the GATE Distribution -->
  <target name="distro"
          depends="compile, jar, doc">
    <property name="gate.full.name" 
              value="gate-${gate.version}-build${gate.build}"/>
    <property name="distDirname"
              value="DISTRIBUTION"/>          
    <property name="distDir" 
              location="${distDirname}"/>
    <property name="doc.dirname"
              value="${gate.full.name}-DOC"/>
    <property name="doc.archive"
              location="${distDir}/${doc.dirname}.zip"/>
    <property name="src.dirname"
              value="${gate.full.name}-SRC"/>
    <property name="src.archive"
              location="${distDir}/${src.dirname}.zip"/>
    <property name="bin.dirname"
              value="${gate.full.name}-BIN"/>
    <property name="bin.archive"
              location="${distDir}/${bin.dirname}.zip"/>
    <property name="all.dirname"
              value="${gate.full.name}-ALL"/>
    <property name="all.archive"
              location="${distDir}/${all.dirname}.zip"/>
    <delete dir="${distDir}"/>    
    <mkdir dir="${distDir}"/>
    
    <!-- Build the DOC archive -->
    <zip destfile="${doc.archive}" 
         update="false"
         compress="true">
      <zipfileset dir="${basedir}"
                  prefix="${doc.dirname}"
                  includes="licence.html,index.html,doc/**"/>
      <zipfileset dir="${basedir}"
                  prefix="${doc.dirname}"
                  file="../sale/tao/tao.pdf"/>
    </zip>
    
    <!-- Build the SRC archive -->
    <zip destfile="${src.archive}" 
         update="false"
         compress="true">
      <zipfileset dir="${basedir}"
                  prefix="${src.dirname}">
        <include name="*"/>
        <include name="bin/**"/>
        <exclude name="bin/gate.jar"/>
        <include name="build/**"/>
        <exclude name="build/*.jar"/>
        <include name="classes"/>
        <include name="doc/**"/>
        <exclude name="doc/java2html/"/>
        <exclude name="doc/javadoc/"/>
        <include name="lib/**"/>
        <include name="src/**"/>
        <include name="plugins/**"/>
      </zipfileset>
      <zipfileset dir="${basedir}"
                  prefix="${src.dirname}/doc/"
                  file="doc/javadoc"/>
      <zipfileset dir="${basedir}"
                  prefix="${src.dirname}/doc/javadoc/"
                  file="doc/javadoc/internal"/>
    </zip>

    <!-- Build the BIN archive -->
    <zip destfile="${bin.archive}" 
         update="false"
         compress="true">
      <zipfileset dir="${basedir}" prefix="${bin.dirname}">
                  <include name="licence.html"/>
                  <include name="build.xml"/>
                  <include name="bin/**"/>
                  <include name="build/version.txt"/>
                  <include name="build/build.txt"/>
                  <include name="lib/**"/>
                  <include name="plugins/**"/>
      </zipfileset>
      <zipfileset dir="${basedir}"
                  prefix="${bin.dirname}"
                  file="../sale/tao/tao.pdf"/>
    </zip>
    
    <!-- Build the ALL archive -->
    <zip destfile="${all.archive}" 
         update="false"
         compress="true">
      <zipfileset dir="${basedir}"
                  prefix="${all.dirname}"
                  excludes="${distDirname},${distDirname}/**"/>
      <zipfileset dir="${basedir}"
                  prefix="${doc.dirname}"
                  file="../sale/tao/tao.pdf"/>
    </zip>
  </target>
  
</project>

