<?xml version="1.0"?>
<!-- $Id$ -->
<project name="GATE" default="all" basedir=".">
    <description>
        GATE 
        see http://gate.ac.uk
    </description>
  <!-- ******************************************************************* 
       ****************  USER OPTIONS ************************************ 
       *******************************************************************
       
       Make changes to this section of the build file to customise your 
       GATE start-up and build script -->    

  <!-- Load user properties from build.properties.  If you need to override
       any of the properties set in this build file, you should create
       build.properties in the same directory.  Property definitions in
       the properties file will override those in the build file.
       
       Also, if you need to pass specific system properties when you run
       the GATE GUI, you should set them in build.properties, prefixed with
       "run.", for example to override the default directory for GATE to
       create temporary files (java.io.tmpdir), you should put the following
       line in build.properties:

       run.java.io.tmpdir=${user.home}/tmp

       note that Ant properties are expanded in this file, this can be a
       very powerful tool. -->
    <property file="build.properties" />
  
  <!-- TOOLS.JAR -->
  <!-- GATE will normally try to guess which tools.jar library to use based on
       your Java installation.
       If you want to set this manually, put a line such as the following in
       your build.properties:

       tools.jar.location=w:/jdk/jdk1.5.0/lib/tools.jar
  -->

  <!-- RUNTIME MEMORY -->
  <property name="runtime.max.memory" value="900M"/>
  <property name="runtime.start.memory" value="200M"/>
  
  <!-- OS specific properties
       To set a system property for GATE running on a specific platform, define
       it here:

       <property name="os.Windows XP.prop.name" value="something" />

       will set the system property prop.name to the value "something" when
       GATE is run on Windows XP.
  -->
  <!-- If you use a 3D accelerated web server, such as Xgl or Aiglx and
       your windows are not resizing properly, then you need to uncomment
       the following line -->	
<!--  <property name="os.Linux.awt.toolkit" value="sun.awt.motif.MToolkit"/>  -->

  <!-- ******************************************************************* 
       ****************  USER OPTIONS END HERE! ************************** 
       ******************************************************************* -->
       
  <!-- set global properties for this build -->
  
  <!-- Directories -->
  <property name="gate.home" location="${basedir}" />
  
  <!-- Sources -->
  <property name="srcDir" location="src"/>
  
  <!-- Files required by the build process -->
  <property name="buildDir" location="build"/>

  <!-- Files required by the build process -->
  <property name="binDir" location="bin"/>
  
  <!-- Output directory for the build process -->
  <property name="outputDir"  location="classes"/>

  <!-- Libraries directory for the build process -->
  <property name="libDir"  location="lib"/>
  
  <!-- Extensions directory for the build process -->
  <property name="extDir"  location="lib/ext"/>

  <!-- Documentation directory -->
  <property name="docDir"  location="doc"/>

  <!-- load ant-contrib for the "if" task -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" >
    <classpath>
      <pathelement location="${libDir}/ant-contrib-1.0b2.jar"/>
    </classpath>
  </taskdef>

  <!-- Read version and build numbers -->
  <loadfile property="gate.version" srcFile="${buildDir}/version.txt"/>
  <loadfile property="gate.build" srcFile="${buildDir}/build.txt"/>

  
  <!-- Use the new 1.3+ compiler -->
  <property name="build.compiler"  value="modern"/>

	<!-- The libraries -->
  <fileset id="libs" dir="${libDir}">
    <include name="*.jar"/>
    <include name="*.zip"/>
  </fileset>

	<!-- The extensions -->
  <fileset id="exts" dir="${extDir}">
    <include name="*.jar"/>
  </fileset>
  
  
  <!-- tools.jar path -->
  
  <!-- GATE will attempt to guess where the Sun Javac classes live -->
  <!-- First try the two variants of $JAVA_HOME/lib/tools.jar -->
  <condition property="tools.jar.location"
            value="${java.home}/../lib/tools.jar">
    <and>
      <not>
        <isset property="tools.jar.location"/>
      </not>
      <available file="${java.home}/../lib/tools.jar"
                 type="file"/>
    </and>
  </condition>
  <condition property="tools.jar.location"
            value="${java.home}/lib/tools.jar">
    <and>
      <not>
        <isset property="tools.jar.location"/>
      </not>
      <available file="${java.home}/lib/tools.jar"
                 type="file"/>
    </and>             
  </condition>  

  <!-- Maybe this is a Mac?  The following should work for a typical Mac OS X
       java.home like:
          /System/Library/Frameworks/JavaVM.framework[/Versions/x.y.z]/Home
  -->
  <condition property="tools.jar.location"
             value="${java.home}/../Classes/classes.jar">
    <and>
      <not>
        <isset property="tools.jar.location"/>
      </not>
      <available file="${java.home}/../Classes/classes.jar"
                 type="file"/>
    </and>             
  </condition>

  <!-- Save tools.jar as a <path>.  If no tools.jar was found, make an empty
       path -->
  <if>
    <isset property="tools.jar.location"/>
    <then>
      <path id="tools.jar.path" location="${tools.jar.location}"/>
      <property name="tools.jar.path.property" refid="tools.jar.path" />
      <property name="toolsjar.debug"
                value="Using tools.jar at ${tools.jar.path.property}" />
    </then>
    <else>
      <path id="tools.jar.path" />
      <property name="toolsjar.debug"
                value="No tools.jar found - Sun compiler not available" />
    </else>
  </if>
  
  <!-- The build CLASSPATH -->
  <path id="build.class.path">
		<fileset refid="libs"/>
    <fileset refid="exts"/>
  </path>
  
  <!-- The run CLASSPATH -->
  <path id="run.class.path">
    <pathelement location="${binDir}/gate.jar"/>
    <path refid="tools.jar.path"/>
		<fileset refid="libs"/>
  </path>
  
  <tstamp>
    <format property="TODAY_UK" pattern="d-MMMM-yyyy" locale="en"/>
    <format property="TSTAMP_UK" pattern="hh:mm" locale="en"/>
  </tstamp>
  
  
  <!-- Prints out some information messages -->
  <echo level="info">
    This is the ANT build script for GATE (http://gate.ac.uk).
    Type &quot;ant help&quot; for details about the targets available.
    GATE ${gate.version}, build ${gate.build}
    Java version ${java.version}</echo>
    
  <!-- Prints out details about the targets -->
  <target name="help">
    <echo level="info">
      This is the ANT build script for gate (http://gate.ac.uk).
      The following targets are available
        -all (default target): compiles GUK and GATE classes and makes the gate.jar archive.
        
        -compile: compiles all the .java files
        -resources: copies the resources to the output directory (${outputDir})
        -jar: creates the gate.jar archive
        -run: starts GATE
        -clean: cleans up the output from all previous builds
        
        -doc: creates the Javadoc and Java2HTML documentation
        -docclean: deletes all built documentation
        -jape: rebuilds the JAPE parser files and associated documentation
        -guk: compiles the GUK classes and builds the guk.jar archive
        -gukdemo: starts the GUK Editor (a.k.a. GATE Unicode Editor)
        -test: runs the GATE test suite
        
        -distro: make a GATE distribution (calls all build tasks in the process)
    </echo>
  </target>
  
	<!-- Copies resources to the output directory -->
  <target name="resources">
		<copy todir="${outputDir}/gate/resources"
		      includeEmptyDirs="true" >
			<fileset dir="${srcDir}/gate/resources"
							 excludes="**/CVS,**/CVS/**,**/.cvsignore" />
		</copy>
		<!-- This is for the debugger's icons -->
		<copy todir="${outputDir}/debugger/gui/icons"
		      includeEmptyDirs="true" >
			<fileset dir="${srcDir}/debugger/gui/icons"
							 excludes="**/CVS,**/CVS/**,**/.cvsignore" />
		</copy>
		<copy file="${buildDir}/build.txt" todir="${outputDir}/gate/resources"/>
		<copy file="${buildDir}/version.txt" todir="${outputDir}/gate/resources"/>
		<copy todir="${outputDir}/gate/util"
		      includeEmptyDirs="true">
			<fileset dir="${srcDir}/gate/util"
               includes="*.tcl"/>
		</copy>
	</target>


	<!-- This target compiles the GUK classes which are required by the main  
       GATE compile task -->  
  <target name="guk" depends="depend">
    <mkdir dir="${outputDir}"/>
    <javac classpathref="build.class.path"
           destdir="${outputDir}" 
           includes="guk/**"
           encoding="UTF-8"
           debug="true"
           debuglevel="lines,source"
           source="1.5"
           target="1.5"
           srcdir="${srcDir}"/>
		<jar destfile="${libDir}/ext/guk.jar" 
         update="false"
         index="true">
      <fileset dir="${outputDir}"
               includes="guk/**"/>
      <fileset dir="${srcDir}/guk/resources"
               excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </jar>
  </target>

  <!-- Calculates dependencies for the source code -->
  <target name="depend">
    <depend srcdir="${srcDir}"
            destdir="${outputDir}"
            cache="${buildDir}/depcache"
            closure="yes"/>
  </target>
  
	<!-- This target compiles all the classes -->  
  <target name="compile"
          depends="depend, guk"
          description="compile the source " >
    <!-- Compile the java code from ${srcDir} into ${buildDir} -->
    <javac srcdir="${srcDir}" 
		       destdir="${outputDir}"
           source="1.5"
           target="1.5"
           encoding="UTF-8"
           debug="true"
    			 deprecation="true"
           debuglevel="lines,source"
           includes="gate/**,com/**,debugger/**,hepple/**"
					 classpathref="build.class.path"/>
  </target>

	<!-- This target compiles all the classes including debug information -->  
  <target name="compile_debug"
          depends="depend, guk"
          description="compile the source " >
    <!-- Compile the java code from ${srcDir} into ${buildDir} -->
    <javac srcdir="${srcDir}" 
		       destdir="${outputDir}"
           encoding="UTF-8"
           source="1.5"
           target="1.5"
           debug="true"
           deprecation="true"    	
           includes="gate/**,com/**,debugger/**,hepple/**"
					 classpathref="build.class.path"/>
  </target>

	
  <!-- Make gate.jar archive -->
	<target name="jar" depends="compile,resources">
		<jar destfile="${binDir}/gate.jar" 
         update="false"
         index="true">
      <fileset dir="${outputDir}/"
               includes="gate/**,com/**,debugger/**,hepple/**"/>
<!--    <zipgroupfileset refid="libs"/> -->
    </jar>
	</target>

  <!-- Make gate.jar archive -->
	<target name="bigjar" depends="compile,resources">
		<jar destfile="${binDir}/gate.jar" 
         update="false"
         index="true">
      <fileset dir="${outputDir}/"
               includes="gate/**,com/**,debugger/**,hepple/**"/>
      <zipgroupfileset refid="libs"/>
    </jar>
	</target>


  <!-- Plugins -->
  <filelist id="plugins.to.build" dir="plugins"
    files="Chemistry_Tagger Jape_Compiler Kea Machine_Learning Minipar
       Montreal_Transducer NP_Chunking TreeTagger arabic cebuano chinese crawl
       google hindi rasp romanian uima yahoo Ontology_Tools" />

  <target name="plugins.build" depends="jar" >
    <for param="plugin">
      <path>
        <filelist refid="plugins.to.build" />
      </path>
      <sequential>
        <echo>Building plugin @{plugin}</echo>
        <ant dir="@{plugin}" inheritAll="false" target="build" />
      </sequential>
    </for>
  </target>

  <target name="plugins.test" depends="jar" >
    <for param="plugin">
      <path>
        <filelist refid="plugins.to.build" />
      </path>
      <sequential>
        <echo>Running tests for plugin @{plugin}</echo>
        <ant dir="@{plugin}" inheritAll="false" target="test" />
      </sequential>
    </for>
  </target>

  <target name="plugins.distro.prepare">
    <for param="plugin">
      <path>
        <filelist refid="plugins.to.build" />
      </path>
      <sequential>
        <echo>Preparing plugin @{plugin} for distribution</echo>
        <ant dir="@{plugin}" inheritAll="false" target="distro.prepare" />
      </sequential>
    </for>
  </target>

  <target name="plugins.clean">
    <for param="plugin">
      <path>
        <filelist refid="plugins.to.build" />
      </path>
      <sequential>
        <echo>Cleaning plugin @{plugin}</echo>
        <ant dir="@{plugin}" inheritAll="false" target="clean" />
      </sequential>
    </for>
  </target>

  <!-- Everything! -->
	<target name="all" depends="jar, plugins.build">
	</target>
  
  <!-- Run the beast -->
  <target name="run" depends="run-pre,run-nonmac,run-mac" >
  </target>
  
  <!-- Prepares for running GATE -->
  <target name="run-pre">
    <property name="class.path.debug" refid="run.class.path"/>
    <echo>
      Starting GATE ${gate.version}, build ${gate.build}
      Using JVM at ${java.home}
      Initial memory ${runtime.start.memory}
      Maximum memory ${runtime.max.memory}
      ${toolsjar.debug}
      CLASSPATH=${class.path.debug}
    </echo>
    <!-- Prepare any user-specified "run." properties -->
    <propertyset id="run.properties">
      <propertyref prefix="run." />
      <mapper type="glob" from="run.*" to="*" />
    </propertyset>
    <!-- gather os-specific properties together -->
    <propertyset id="os.properties">
      <propertyref prefix="os.${os.name}." />
      <mapper type="glob" from="os.${os.name}.*" to="*" />
    </propertyset>
    <!-- Find if the platform is MAC -->
    <condition property="running.on.mac">
      <os family="mac"/>
    </condition>
  </target>
  
  <!-- Starts GATE on non MAC platforms -->  
  <target name="run-nonmac" unless="running.on.mac">
    <java classname="gate.Main" 
          classpathref="run.class.path" 
          fork="true"
          spawn="false"
          dir="." 
          logError="true"
          maxmemory="${runtime.max.memory}">
<!--	     <jvmarg value="-Xms${runtime.start.memory}"/> -->
      <jvmarg value="-server"/> 
    	<sysproperty key="gate.home" value="${basedir}"/>   
       <sysproperty key="java.ext.dirs" value="${extDir}"/>
 <!--<sysproperty key="awt.toolkit" value="sun.awt.motif.MToolkit"/>-->
 <!-- <sysproperty key="sun.java2d.opengl" value="true"/>-->
       <syspropertyset refid="run.properties" />
       <syspropertyset refid="os.properties" />
     </java>
  </target>
  
  <!-- Starts GATE on MAC platforms -->
  <target name="run-mac" if="running.on.mac">
    <java classname="gate.Main" 
          classpathref="run.class.path" 
          fork="true"
          spawn="false"
          dir="." 
          logError="true"
          maxmemory="${runtime.max.memory}">
<!--	     <jvmarg value="-Xms${runtime.start.memory}"/> -->
       <sysproperty key="gate.home" value="${basedir}"/>   
       <sysproperty key="java.ext.dirs" value="${extDir}"/>
       <sysproperty key="sun.java2d.opengl" value="true"/>
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/>
       <sysproperty key="com.apple.mrj.application.growbox.intrudes" value="false"/>
       <sysproperty key="com.apple.mrj.application.live-resize" value="true"/>
       <jvmarg value="-Xdock:name=GATE ${gate.version}"/>
       <syspropertyset refid="run.properties" />
       <syspropertyset refid="os.properties" />
     </java>
  </target>
  
  <!-- Run the GUK editor -->
  <target name="gukdemo">
    <java classname="guk.Editor" 
          fork="true"
          spawn="false">
      <sysproperty key="java.ext.dirs" value="${extDir}"/>
     </java>
  </target>
  
  <!-- Clear all build output -->
  <target name="clean.gate">
    <delete includeemptydirs="true">
      <fileset dir="${outputDir}" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
  </target>

  <!-- Clean everything (including buildable plugins) -->
  <target name="clean" depends="clean.gate, plugins.clean" />
  
  <!-- Make documentation -->
	<taskdef name="java2html"
	    classname="de.java2html.anttasks.Java2HtmlTask"
	    classpath="${buildDir}/lib/java2html.jar"
	/>
  <target name="javadoc">
    <javadoc access="protected" 
              destdir="${docDir}/javadoc"
              classpathref="run.class.path"
              Extdirs="${extDir}"
              Encoding="UTF-8"
              Use="yes"
              Windowtitle="GATE JavaDoc"
              link="http://java.sun.com/j2se/1.5.0/docs/api/"
              docencoding="UTF-8"
              charset="UTF-8"
              source="1.5"
              useexternalfile="yes"
              breakiterator="true"
    	        linksource="yes">
      <fileset dir="${srcDir}"/>        
    </javadoc>
  	<!-- Now replace the ugly Java-html files with a better version -->
  	<delete dir="${docDir}/javadoc/src-html"/>
  	<java2html srcdir="${srcDir}"
  	           destdir="${docDir}/javadoc/src-html"
  		         includes="**/*.java"
  	           style="eclipse"
               showLineNumbers="true"
               showFileName="true"
               showTableBorder="false"
               includeDocumentHeader="true"
               outputFormat="html"
               lineAnchorPrefix="line."
               tabs="2"
               addLineAnchors="true"
               showDefaultTitle="true"
               useShortFileName="true"
               overwrite="true"/>  	
  </target>
  
  <!-- Make documentation - internal -->
  <target name="internaljavadoc">
   <javadoc access="private" 
              destdir="${docDir}/javadoc/internal"
              classpathref="run.class.path"
              Extdirs="${extDir}"
              Encoding="UTF-8"
              Use="yes"
              Windowtitle="GATE JavaDoc (including private members)"
              link="http://java.sun.com/j2se/1.5.0/docs/api/"
              docencoding="UTF-8"
              charset="UTF-8"
              source="1.5"
              useexternalfile="yes"
              breakiterator="true"
              linksource="yes">
      <fileset dir="${srcDir}"/>        
    </javadoc>
  	<delete dir="${docDir}/javadoc/internal/src-html"/>
  	<java2html srcdir="${srcDir}"
  	           destdir="${docDir}/javadoc/internal/src-html"
				      includes="**/*.java"
				      style="eclipse"
				      showLineNumbers="true"
				      showFileName="true"
				      showTableBorder="false"
				      includeDocumentHeader="true"
				      outputFormat="html"
				      lineAnchorPrefix="line."
				      tabs="2"
				      addLineAnchors="true"
				      showDefaultTitle="true"
				      useShortFileName="true"
				      overwrite="true"/> 	
  </target>
	
  <target name="doc" depends="javadoc, internaljavadoc"/>
 
  
  <!-- Clear all built documentation -->
  <target name="docclean">
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/javadoc" excludes="**/CVS,**/CVS/**,**/.cvsignore,internal,internal/**"/>
    </delete>
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/javadoc/internal" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
  </target>
  
  <!-- Rebuild the JAPE file parser. 
       Uses JavaCC 0.8pre1 from ../lib for the java, and 0.7 
       from ./JavaCC-071.zip for the HTML to avoid JJDoc bug in 0.8pre1 -->
  <target name="jape">
    <java classname="javacc" 
          fork="true"
          spawn="false"
          dir="${srcDir}/gate/jape/parser">
      <classpath>
        <pathelement location="${libDir}/javacc.jar"/>
      </classpath>
      <arg value="ParseCpsl.jj"/>
    </java>
    
    <java classname="jjdoc" 
          fork="true"
          spawn="false"
          dir="${srcDir}/gate/jape/parser">
      <classpath>
        <pathelement location="${libDir}/javacc.jar"/>
      </classpath>
      <arg value="ParseCpsl.jj"/>
    </java>

    <move file="${srcDir}/gate/jape/parser/ParseCpsl.html"
          toFile="${srcDir}/gate/jape/parser/ParseCpslPlain.html"/>
          
    <java classname="jjdoc" 
          fork="true"
          spawn="false"
          dir="${srcDir}/gate/jape/parser">
      <classpath>
        <pathelement location="${libDir}/javacc.jar"/>
      </classpath>
      <arg value="-ONE_TABLE=false"/>
      <arg value="ParseCpsl.jj"/>
    </java>
  </target>
  
  
  <target name="test.gate" depends="jar">
    <junit fork="true" 
           showoutput="true"
           printsummary="yes"
           maxmemory="300m">
      <classpath refid="run.class.path"/>
      <sysproperty key="gate.config" value="${buildDir}/gate.xml"/>
      <sysproperty key="gate.home" value="${basedir}"/>
      <sysproperty key="load.plugin.path" value="file:${basedir}/plugins/ANNIE;file:${basedir}/plugins/Information_Retrieval;file:${basedir}/plugins/Obsolete;file:${basedir}/plugins/Ontology_Tools;file:${basedir}/plugins/Tools;file:${basedir}/plugins/WordNet"/>      
      <sysproperty key="java.ext.dirs" value="${extDir}"/>
      <sysproperty key="java.awt.headless" value="true"/>
      <formatter type="plain"
                 usefile="false"/>
      <formatter type="xml"
                 if="write.xml"/>
      <test name="gate.TestGate"
            outfile="testResult"
            todir="${buildDir}"/>
    </junit>
  </target>

  <target name="test" depends="test.gate, plugins.build, plugins.test" />
  
  <target name="guitest" depends="plugins.build">
    <java classname="junit.swingui.TestRunner" 
          classpathref="run.class.path" 
          fork="true"
          spawn="false"
          dir="." 
          logError="true"
          maxmemory="${runtime.max.memory}">
       <sysproperty key="gate.home" value="${basedir}"/>  
       <sysproperty key="gate.config" value="${buildDir}/gate.xml"/>
       <sysproperty key="load.plugin.path" value="file:${basedir}/plugins/ANNIE;file:${basedir}/plugins/Information_Retrieval;file:${basedir}/plugins/Machine_Learning;file:${basedir}/plugins/Obsolete;file:${basedir}/plugins/Ontology_Tools;file:${basedir}/plugins/Tools;file:${basedir}/plugins/WordNet"/>      
       <sysproperty key="java.ext.dirs" value="${extDir}"/>
       <syspropertyset refid="run.properties" />
      <arg value="gate.TestGate"/>
     </java>
  </target>
	
  <!-- Make the archives for the GATE Distribution -->
  <target name="distro"
          depends="compile, jar, doc, plugins.build, plugins.distro.prepare">
    <property name="gate.full.name" 
              value="gate-${gate.version}-build${gate.build}"/>
    <property name="distDirname"
              value="DISTRIBUTION"/>          
    <property name="distDir" 
              location="${distDirname}"/>
    <property name="doc.dirname"
              value="${gate.full.name}-DOC"/>
    <property name="doc.archive"
              location="${distDir}/${doc.dirname}.zip"/>
    <property name="src.dirname"
              value="${gate.full.name}-SRC"/>
    <property name="src.archive"
              location="${distDir}/${src.dirname}.zip"/>
    <property name="bin.dirname"
              value="${gate.full.name}-BIN"/>
    <property name="bin.archive"
              location="${distDir}/${bin.dirname}.zip"/>
    <property name="all.dirname"
              value="${gate.full.name}-ALL"/>
    <property name="all.archive"
              location="${distDir}/${all.dirname}.zip"/>
    <delete dir="${distDir}"/>    
    <mkdir dir="${distDir}"/>

    <!-- Files in plugins that should be stored in the zip files with execute
         permissions.  We assume for safety that anything except .java, .xml,
         .txt and README files may need execute permission -->
    <patternset id="plugins.exec">
      <include name="plugins/**" />
      <exclude name="**/*.java" />
      <exclude name="**/*.xml" />
      <exclude name="**/*.txt" />
      <exclude name="**/*README*" />
    </patternset>

    <!-- This pattern should match everything in plugins that is not covered by
         the previous set -->
    <patternset id="plugins.nonexec">
      <include name="plugins/**/*.java" />
      <include name="plugins/**/*.xml" />
      <include name="plugins/**/*.txt" />
      <include name="plugins/**/*README*" />
    </patternset>
    
    <!-- Build the DOC archive -->
    <zip destfile="${doc.archive}" 
         update="false"
         compress="true">
      <zipfileset dir="${basedir}"
                  prefix="${doc.dirname}"
                  includes="licence.html,index.html,doc/**"/>
      <zipfileset dir="${basedir}"
                  prefix="${doc.dirname}"
                  file="../sale/tao/tao.pdf"/>
    </zip>
    
    <!-- Build the SRC archive -->
    <zip destfile="${src.archive}" 
         update="false"
         duplicate="preserve"
         compress="true">
      <!-- files in bin need execute permissions -->
      <zipfileset dir="${basedir}"
                  prefix="${src.dirname}"
                  includes="bin/**"
                  filemode="755" />
      <!-- Certain files in plugins may need execute permission too -->
      <zipfileset dir="${basedir}"
                  prefix="${src.dirname}"
                  filemode="755">
        <patternset refid="plugins.exec" />
      </zipfileset>

      <!-- everything else gets the default non-executable permissions -->
      <zipfileset dir="${basedir}"
                  prefix="${src.dirname}">
        <include name="*"/>
        <exclude name="${distDirname}" />
        <include name="build/**"/>
        <exclude name="build/*.jar"/>
        <exclude name="build/deploy/**"/>
        <include name="classes"/>
        <include name="doc/**"/>
        <exclude name="doc/javadoc/"/>
        <include name="lib/**"/>
        <include name="src/**"/>
        <!-- include everything from plugins that wasn't included above -->
        <patternset refid="plugins.nonexec" />
      </zipfileset>
      <zipfileset dir="${basedir}"
                  prefix="${src.dirname}/doc/"
                  file="doc/javadoc"/>
      <zipfileset dir="${basedir}"
                  prefix="${src.dirname}/doc/javadoc/"
                  file="doc/javadoc/internal"/>
    </zip>

    <!-- Build the BIN archive -->
    <zip destfile="${bin.archive}" 
         update="false"
         duplicate="preserve"
         compress="true">
      <!-- files in bin need execute permissions -->
      <zipfileset dir="${basedir}"
                  prefix="${bin.dirname}"
                  includes="bin/**"
                  filemode="755" />
      <!-- Certain files in plugins may need execute permission too -->
      <zipfileset dir="${basedir}"
                  prefix="${bin.dirname}"
                  filemode="755">
        <patternset refid="plugins.exec" />
      </zipfileset>

      <!-- everything else gets the default non-executable permissions -->
      <zipfileset dir="${basedir}" prefix="${bin.dirname}">
        <include name="licence.html"/>
        <include name="build.xml"/>
        <include name="gate.xml"/>
        <include name="build/version.txt"/>
        <include name="build/persist/**"/>
        <include name="build/build.txt"/>
        <include name="lib/**"/>
        <!-- include everything from plugins that wasn't included above -->
        <patternset refid="plugins.nonexec" />
      </zipfileset>
      <zipfileset dir="${basedir}"
                  prefix="${bin.dirname}"
                  file="../sale/tao/tao.pdf"/>
    </zip>
    
    <!-- Build the ALL archive -->
    <zip destfile="${all.archive}" 
         update="false"
         duplicate="preserve"
         compress="true">
      <!-- files in bin need execute permissions -->
      <zipfileset dir="${basedir}"
                  prefix="${all.dirname}"
                  includes="bin/**"
                  filemode="755" />
      <!-- Certain files in plugins may need execute permission too -->
      <zipfileset dir="${basedir}"
                  prefix="${all.dirname}"
                  filemode="755">
        <patternset refid="plugins.exec" />
      </zipfileset>

      <!-- everything else gets the default non-executable permissions -->
      <zipfileset dir="${basedir}"
                  prefix="${all.dirname}">
        <patternset refid="plugins.nonexec" />
      </zipfileset>
      <zipfileset dir="${basedir}"
                  prefix="${all.dirname}">
        <exclude name="${distDirname}" />
        <exclude name="${distDirname}/**" />
        <exclude name="plugins/**" />
        <exclude name="bin/**" />
      </zipfileset>
      <zipfileset dir="${basedir}"
                  prefix="${all.dirname}"
                  file="../sale/tao/tao.pdf"/>        
    </zip>
  </target>
	
	<!-- define the IzPack Ant task -->
	<taskdef name="izpack" classname="com.izforge.izpack.ant.IzPackTask">
		<classpath>
			<pathelement path="${build.class.path}"/>
			<pathelement location="${buildDir}/lib/standalone-izpack-installer-compiler.jar"/>
		</classpath>
	</taskdef>
	
	<target name="installer">
		<izpack input="${buildDir}/deploy/gate-installer.xml"
		        output="${basedir}/gate-installer.jar"
		        basedir="${basedir}">			
		</izpack>
	</target>
</project>
