<?xml version="1.0"?>
<!-- $Id$ -->
<project name="GATE" default="all" basedir=".">
    <description>
        GATE 
        see http://gate.ac.uk
    </description>
  <!-- ******************************************************************* 
       ****************  USER OPTIONS ************************************ 
       *******************************************************************
       
       Make changes to this section of the build file to customise your 
       GATE start-up and build script -->    
  
  <!-- TOOLS.JAR -->
  <!-- GATE will normally try to guess which tools.jar library to use based on
       your Java installation.
       If you want to set this manually uncomment the line below & edit it -->
  <!-- <property name="tools.jar.location" value="w:/jdk/jdk1.5.0/lib/tools.jar"/> -->

  <!-- RUNTIME MEMORY -->
  <property name="run.memory" value="200M"/>
  
  <!-- ******************************************************************* 
       ****************  USER OPTIONS END HERE! ************************** 
       ******************************************************************* -->
       
  <!-- set global properties for this build -->
  
  <!-- Directories -->
  
  <!-- Sources -->
  <property name="srcDir" location="src"/>
  
  <!-- Files required by the build process -->
  <property name="buildDir" location="build"/>

  <!-- Files required by the build process -->
  <property name="binDir" location="bin"/>
  
  <!-- Output directory for the build process -->
  <property name="outputDir"  location="classes"/>

  <!-- Libraries directory for the build process -->
  <property name="libDir"  location="lib"/>
  
  <!-- Extensions directory for the build process -->
  <property name="extDir"  location="lib/ext"/>

  <!-- Documentation directory -->
  <property name="docDir"  location="doc"/>

  <!-- load ant-contrib for the "if" task -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${libDir}/ant-contrib-0.3.jar"/>
    </classpath>
  </taskdef>

  <!-- Read version and build numbers -->
  <loadfile property="gate.version" srcFile="${buildDir}/version.txt"/>
  <loadfile property="gate.build" srcFile="${buildDir}/build.txt"/>

  
  <!-- Use the new 1.3+ compiler -->
  <property name="build.compiler"  value="modern"/>

	<!-- The libraries -->
  <fileset id="libs" dir="${libDir}">
    <include name="*.jar"/>
    <include name="*.zip"/>
  </fileset>

	<!-- The extensions -->
  <fileset id="exts" dir="${extDir}">
    <include name="*.jar"/>
  </fileset>
  
  
  <!-- tools.jar path -->
  
  <!-- GATE will attemt to guess which tools.jar file to use. -->
  <!-- First try the two variants of $JAVA_HOME/lib/tools.jar -->
  <condition property="tools.jar.location"
            value="${java.home}/../lib/tools.jar">
    <and>
      <not>
        <isset property="tools.jar.location"/>
      </not>
      <available file="${java.home}/../lib/tools.jar"
                 type="file"/>
    </and>
  </condition>
  <condition property="tools.jar.location"
            value="${java.home}/lib/tools.jar">
    <and>
      <not>
        <isset property="tools.jar.location"/>
      </not>
      <available file="${java.home}/lib/tools.jar"
                 type="file"/>
    </and>             
  </condition>  

  <!-- Save tools.jar as a <path>.  If no tools.jar was found, make an empty
       path -->
  <if>
    <isset property="tools.jar.location"/>
    <then>
      <path id="tools.jar.path" location="${tools.jar.location}"/>
      <property name="tools.jar.path.property" refid="tools.jar.path" />
      <property name="toolsjar.debug"
                value="Using tools.jar at ${tools.jar.path.property}" />
    </then>
    <else>
      <path id="tools.jar.path" />
      <property name="toolsjar.debug"
                value="No tools.jar found - Sun compiler not available" />
    </else>
  </if>
  
  <!-- The build CLASSPATH -->
  <path id="build.class.path">
		<fileset refid="libs"/>
    <fileset refid="exts"/>
  </path>
  
  <!-- The run CLASSPATH -->
  <path id="run.class.path">
    <pathelement location="${binDir}/gate.jar"/>
    <path refid="tools.jar.path"/>
		<fileset refid="libs"/>
  </path>
  
  <tstamp>
    <format property="TODAY_UK" pattern="d-MMMM-yyyy" locale="en"/>
    <format property="TSTAMP_UK" pattern="hh:mm" locale="en"/>
  </tstamp>
  
  
  <!-- Prints out some information messages -->
  <echo level="info">
    This is the ANT build script for GATE (http://gate.ac.uk).
    Type &quot;ant help&quot; for details about the targets available.
    GATE ${gate.version}, build ${gate.build}</echo>
    
  <!-- Prints out details about the targets -->
  <target name="help">
    <echo level="info">
      This is the ANT build script for gate (http://gate.ac.uk).
      The following targets are available
        -all (default target): compiles GUK and GATE classes and makes the gate.jar archive.
        
        -compile: compiles all the .java files
        -resources: copies the resources to the output directory (${outputDir})
        -jar: creates the gate.jar archive
        -run: starts GATE
        -clean: cleans up the output from all previous builds
        
        -doc: creates the Javadoc and Java2HTML documentation
        -docclean: deletes all built documentation
        -jape: rebuilds the JAPE parser files and associated documentation
        -guk: compiles the GUK classes and builds the guk.jar archive
        -gukdemo: starts the GUK Editor (a.k.a. GATE Unicode Editor)
        -test: runs the GATE test suite
        
        -distro: make a GATE distribution (calls all build tasks in the process)
    </echo>
  </target>
  
	<!-- Copies resources to the output directory -->
  <target name="resources">
		<copy todir="${outputDir}/gate/resources"
		      includeEmptyDirs="true" >
			<fileset dir="${srcDir}/gate/resources"
							 excludes="**/CVS,**/CVS/**,**/.cvsignore" />
		</copy>
		<!-- This is for the debugger's icons -->
		<copy todir="${outputDir}/debugger/gui/icons"
		      includeEmptyDirs="true" >
			<fileset dir="${srcDir}/debugger/gui/icons"
							 excludes="**/CVS,**/CVS/**,**/.cvsignore" />
		</copy>
		<copy file="${buildDir}/build.txt" todir="${outputDir}/gate/resources"/>
		<copy file="${buildDir}/version.txt" todir="${outputDir}/gate/resources"/>
		<copy todir="${outputDir}/gate/util"
		      includeEmptyDirs="true">
			<fileset dir="${srcDir}/gate/util"
               includes="*.tcl"/>
		</copy>
	</target>


	<!-- This target compiles the GUK classes which are required by the main  
       GATE compile task -->  
  <target name="guk">
    <mkdir dir="${outputDir}"/>
    <javac classpathref="build.class.path"
           destdir="${outputDir}" 
           includes="guk/**"
           encoding="UTF-8"
           debug="true"
           debuglevel="lines,source"
           source="1.4"
           srcdir="${srcDir}"/>
		<jar destfile="${libDir}/ext/guk.jar" 
         update="false"
         index="true">
      <fileset dir="${outputDir}"
               includes="guk/**"/>
      <fileset dir="${srcDir}/guk/resources"
               excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </jar>
  </target>

	<!-- This target compiles all the classes -->  
  <target name="compile"
          depends="guk"
          description="compile the source " >
    <!-- Compile the java code from ${srcDir} into ${buildDir} -->
    <javac srcdir="${srcDir}" 
		       destdir="${outputDir}"
           source="1.4"
           encoding="UTF-8"
           debug="true"
    			 deprecation="true"
           debuglevel="lines,source"
           includes="gate/**,com/**,debugger/**"
					 classpathref="build.class.path"/>
  </target>

	<!-- This target compiles all the classes including debug information -->  
  <target name="compile_debug"
          depends="guk"
          description="compile the source " >
    <!-- Compile the java code from ${srcDir} into ${buildDir} -->
    <javac srcdir="${srcDir}" 
		       destdir="${outputDir}"
           encoding="UTF-8"
           source="1.4"
           debug="true"
           deprecation="true"    	
           includes="gate/**,com/**,debugger/**"
					 classpathref="build.class.path"/>
  </target>

	
  <!-- Make gate.jar archive -->
	<target name="jar" depends="compile,resources">
		<jar destfile="${binDir}/gate.jar" 
         update="false"
         index="true">
      <fileset dir="${outputDir}/"
               includes="gate/**,com/**,debugger/**"/>
<!--    <zipgroupfileset refid="libs"/> -->
    </jar>
	</target>

  <!-- Make gate.jar archive -->
	<target name="bigjar" depends="compile,resources">
		<jar destfile="${binDir}/gate.jar" 
         update="false"
         index="true">
      <fileset dir="${outputDir}/"
               includes="gate/**,com/**,debugger/**"/>
      <zipgroupfileset refid="libs"/>
    </jar>
	</target>

  
  <!-- Everything! -->
	<target name="all" depends="jar">
	</target>
  
  <!-- Run the beast -->
  <target name="run" depends="run-pre,run-nonmac,run-mac" >
  </target>
  
  <!-- Prepares for running GATE -->
  <target name="run-pre">
    <property name="class.path.debug" refid="run.class.path"/>
    <echo>
      Starting GATE ${gate.version}, build ${gate.build}
      Using JVM at ${java.home}
      Maximum memory ${run.memory}
      ${toolsjar.debug}
      CLASSPATH=${class.path.debug}
    </echo>
    <!-- Find if the platform is MAC -->
    <condition property="running.on.mac">
      <os family="mac"/>
    </condition>
  </target>
  
  <!-- Starts GATE on non MAC platforms -->  
  <target name="run-nonmac" unless="running.on.mac">
    <java classname="gate.Main" 
          classpathref="run.class.path" 
          fork="true"
          spawn="false"
          dir="." 
          logError="true"
          maxmemory="${run.memory}">
       <jvmarg value="-Dgate.home=${basedir}"/>   
       <jvmarg value="-Djava.ext.dirs=${extDir}"/>
       <jvmarg value="-Dsun.java2d.opengl=true"/>
     </java>
  </target>
  
  <!-- Starts GATE on MAC platforms -->
  <target name="run-mac" if="running.on.mac">
    <java classname="gate.Main" 
          classpathref="run.class.path" 
          fork="true"
          spawn="false"
          dir="." 
          logError="true"
          maxmemory="${run.memory}">
       <jvmarg value="-Dgate.home=${basedir}"/>   
       <jvmarg value="-Djava.ext.dirs=${extDir}"/>
       <jvmarg value="-Dsun.java2d.opengl=true"/>
       <jvmarg value="-Dapple.laf.useScreenMenuBar=true"/>
       <jvmarg value="-Dcom.apple.mrj.application.growbox.intrudes=false"/>
       <jvmarg value="-Dcom.apple.mrj.application.live-resize=true"/>
       <jvmarg value="-Xdock:name=GATE 3.0"/>
     </java>
  </target>
  
  <!-- Run the GUK editor -->
  <target name="gukdemo">
    <java classname="guk.Editor" 
          fork="true"
          spawn="false">
      <jvmarg value="-Djava.ext.dirs=${extDir}"/>
     </java>
  </target>
  
  <!-- Clear all build output -->
  <target name="clean">
    <delete includeemptydirs="true">
      <fileset dir="${outputDir}" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
  </target>
  
  <!-- Make documentation -->
  <target name="javadoc">
    <javadoc access="protected" 
              destdir="${docDir}/javadoc"
              classpathref="run.class.path"
              Extdirs="${extDir}"
              Encoding="UTF-8"
              Use="yes"
              Windowtitle="GATE JavaDoc"
              link="http://java.sun.com/j2se/1.4.2/docs/api/"
              docencoding="UTF-8"
              charset="UTF-8"
              source="1.4"
              breakiterator="true">
      <fileset dir="${srcDir}"/>        
    </javadoc>
  </target>
  
  <!-- Make documentation - internal -->
  <target name="internaljavadoc">
    <javadoc access="private" 
              destdir="${docDir}/javadoc/internal"
              classpathref="run.class.path"
              Extdirs="${extDir}"
              Encoding="UTF-8"
              Use="yes"
              Windowtitle="GATE JavaDoc"
              link="http://java.sun.com/j2se/1.4.2/docs/api/"
              docencoding="UTF-8"
              charset="UTF-8"
              source="1.4"
              breakiterator="true">
      <fileset dir="${srcDir}"/>        
    </javadoc>
  </target>

  
  <!-- Convert the source to HTML using the java2html utility -->
  <target name="java2html">
    <java jar="${buildDir}/lib/j2h.jar"
          fork="true"
          spawn="false">
      <jvmarg value="-Dfile.encoding=UTF-8"/>
      <arg value="-d"/> <arg file="${docDir}/java2html/"/>
      <arg value="-js"/> <arg file="${srcDir}"/>
      <arg value="-jd"/> <arg file="${docDir}/javadoc"/>
      <arg value="-m"/> <arg value="4"/>
      <arg value="-t"/> <arg value="2"/>
      <arg value="-n"/> <arg value="&quot;GATE source&quot;"/>
    </java>
  </target>
 
  <target name="doc" depends="javadoc, internaljavadoc, java2html"/>
 
  
  <!-- Clear all built documentation -->
  <target name="docclean">
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/javadoc" excludes="**/CVS,**/CVS/**,**/.cvsignore,internal,internal/**"/>
    </delete>
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/javadoc/internal" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
    <delete includeemptydirs="true">
      <fileset dir="${docDir}/java2html" excludes="**/CVS,**/CVS/**,**/.cvsignore"/>
    </delete>
  </target>
  
  <!-- Rebuild the JAPE file parser. 
       Uses JavaCC 0.8pre1 from ../lib for the java, and 0.7 
       from ./JavaCC-071.zip for the HTML to avoid JJDoc bug in 0.8pre1 -->
  <target name="jape">
    <java classname="javacc" 
          fork="true"
          spawn="false"
          dir="${srcDir}/gate/jape/parser">
      <classpath>
        <pathelement location="${libDir}/javacc.jar"/>
      </classpath>
      <arg value="ParseCpsl.jj"/>
    </java>
    
    <java classname="jjdoc" 
          fork="true"
          spawn="false"
          dir="${srcDir}/gate/jape/parser">
      <classpath>
        <pathelement location="${libDir}/javacc.jar"/>
      </classpath>
      <arg value="ParseCpsl.jj"/>
    </java>

    <move file="${srcDir}/gate/jape/parser/ParseCpsl.html"
          toFile="${srcDir}/gate/jape/parser/ParseCpslPlain.html"/>
          
    <java classname="jjdoc" 
          fork="true"
          spawn="false"
          dir="${srcDir}/gate/jape/parser">
      <classpath>
        <pathelement location="${libDir}/javacc.jar"/>
      </classpath>
      <arg value="-ONE_TABLE=false"/>
      <arg value="ParseCpsl.jj"/>
    </java>
  </target>
  
  
  <target name="test" depends="jar">
    <junit fork="true" 
           showoutput="false"
           printsummary="yes"
           maxmemory="200m">
      <classpath refid="run.class.path"/>
      <sysproperty key="gate.config" value="${buildDir}/gate.xml"/>
      <sysproperty key="gate.home" value="${basedir}"/>
      <sysproperty key="load.plugin.path" value="file:${basedir}/plugins/ANNIE;file:${basedir}/plugins/Information_Retrieval;file:${basedir}/plugins/Machine_Learning;file:${basedir}/plugins/Obsolete;file:${basedir}/plugins/Ontology_Tools;file:${basedir}/plugins/Tools;file:${basedir}/plugins/WordNet"/>      
      <jvmarg value="-Djava.ext.dirs=${extDir}"/>
      <formatter type="plain"
                 usefile="false"/>
      <formatter type="xml"
                 if="write.xml"/>
      <test name="gate.TestGate"
            outfile="testResult"
            todir="${buildDir}"/>
    </junit>
  </target>
  
  <!-- Make the archives for the GATE Distribution -->
  <target name="distro"
          depends="compile, jar, doc">
    <property name="gate.full.name" 
              value="gate-${gate.version}-build${gate.build}"/>
    <property name="distDirname"
              value="DISTRIBUTION"/>          
    <property name="distDir" 
              location="${distDirname}"/>
    <property name="doc.dirname"
              value="${gate.full.name}-DOC"/>
    <property name="doc.archive"
              location="${distDir}/${doc.dirname}.zip"/>
    <property name="src.dirname"
              value="${gate.full.name}-SRC"/>
    <property name="src.archive"
              location="${distDir}/${src.dirname}.zip"/>
    <property name="bin.dirname"
              value="${gate.full.name}-BIN"/>
    <property name="bin.archive"
              location="${distDir}/${bin.dirname}.zip"/>
    <property name="all.dirname"
              value="${gate.full.name}-ALL"/>
    <property name="all.archive"
              location="${distDir}/${all.dirname}.zip"/>
    <delete dir="${distDir}"/>    
    <mkdir dir="${distDir}"/>
    
    <!-- Build the DOC archive -->
    <zip destfile="${doc.archive}" 
         update="false"
         compress="true">
      <zipfileset dir="${basedir}"
                  prefix="${doc.dirname}"
                  includes="licence.html,index.html,doc/**"/>
      <zipfileset dir="${basedir}"
                  prefix="${doc.dirname}"
                  file="../sale/tao/tao.pdf"/>
    </zip>
    
    <!-- Build the SRC archive -->
    <zip destfile="${src.archive}" 
         update="false"
         compress="true">
      <zipfileset dir="${basedir}"
                  prefix="${src.dirname}">
        <include name="*"/>
        <include name="bin/**"/>
        <include name="build/**"/>
        <exclude name="build/*.jar"/>
        <exclude name="build/deploy/**"/>
        <include name="classes"/>
        <include name="doc/**"/>
        <exclude name="doc/java2html/"/>
        <exclude name="doc/javadoc/"/>
        <include name="lib/**"/>
        <include name="src/**"/>
        <include name="plugins/**"/>
      </zipfileset>
      <zipfileset dir="${basedir}"
                  prefix="${src.dirname}/doc/"
                  file="doc/javadoc"/>
      <zipfileset dir="${basedir}"
                  prefix="${src.dirname}/doc/javadoc/"
                  file="doc/javadoc/internal"/>
    </zip>

    <!-- Build the BIN archive -->
    <zip destfile="${bin.archive}" 
         update="false"
         compress="true">
      <zipfileset dir="${basedir}" prefix="${bin.dirname}">
                  <include name="licence.html"/>
                  <include name="build.xml"/>
                  <include name="gate.xml"/>
                  <include name="bin/**"/>
                  <include name="build/version.txt"/>
                  <include name="build/persist/**"/>
                  <include name="build/build.txt"/>
                  <include name="lib/**"/>
                  <include name="plugins/**"/>
      </zipfileset>
      <zipfileset dir="${basedir}"
                  prefix="${bin.dirname}"
                  file="../sale/tao/tao.pdf"/>
    </zip>
    
    <!-- Build the ALL archive -->
    <zip destfile="${all.archive}" 
         update="false"
         compress="true">
      <zipfileset dir="${basedir}"
                  prefix="${all.dirname}"
                  excludes="${distDirname},${distDirname}/**"/>
    </zip>
  </target>
  
</project>

